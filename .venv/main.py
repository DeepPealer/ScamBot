# -*- coding: utf-8 -*-
import uuid

import requests
import telebot
from g4f.client import Client
from telebot import types
from fake_useragent import UserAgent
import json
import inflect

TOKEN = '6761411565:AAE5pFixORdpHF55IngLxWYHxz1fqg0Ygv4'

bot = telebot.TeleBot(TOKEN)
referrals = {}
users = {}
admin_users = [786320574, 1079020959]
questions = [
    "–ò–º—è –§–∞–º–∏–ª–∏—è:",
    "–ü–æ–ª:",
    "–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:",
    "–í–æ–∑—Ä–∞—Å—Ç:",
    "–î–∞—Ç–∞ –∏ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:",
    "–°–µ–º—å—è:",
    "–ú–µ—Å—Ç–æ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:",
    "–û–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏:",
    "–î–µ—Ç—Å—Ç–≤–æ (—É–∫–∞–∂–∏—Ç–µ –ø–∞—Ä—É —Å–ª–æ–≤ –æ –≤–∞—à–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –±—ã–ª –¥–æ–±—Ä—ã–º –ø–∞—Ä–Ω–µ–º):",
    "–Æ–Ω–æ—Å—Ç—å –∏ –≤–∑—Ä–æ—Å–ª–∞—è –∂–∏–∑–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∞–ª –±–∞–Ω–¥–∏—Ç–æ–º):",
    "–í–∑—Ä–æ—Å–ª–∞—è –∂–∏–∑–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–∫—Ä—ã–ª —Å–≤–æ–π –±–∏–∑–Ω–µ—Å):"
]


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.message.chat.id
    if call.data == 'give_balance':
        handle_give_balance(call)
    if call.data == 'your_ref':
        get_referral_link(call.message)
    if call.data == 'more_info_withdraw':
        more_info_withdraw(call)
    if call.data == 'hand_balance':
        hand_balance(call)
    if call.data == 'guides':
        handler_guides(call)
    if call.data == 'car_prices':
        handler_car_prices(call)
    if call.data == 'biznes_prices':
        handler_biznes_prices(call)
    if call.data == 'offer_news':
        handler_offer_news(call)
    if call.data == 'write_biography':
        handler_write_biography(call)
    if call.data == 'level_up_info':
        level_up_info(call)
    if call.data == 'main_menu':
        main_menu(call)
    if call.data == "withdraw":
        bot.send_message(call.message.chat.id, "–û—Ç–ª–∏—á–Ω–æ, —Å–µ–π—á–∞—Å —è –∑–∞–¥–∞–º –≤–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.")
        withdraw_process(call.message, {})
    elif call.data == 'low_class_cars':
        handler_low_class_cars(call)
    elif call.data == 'luxury_cars':
        handler_luxury_cars(call)
    elif call.data == 'luxury_cars_2':
        handler_luxury_cars_2(call)
    elif call.data == 'motorcycles':
        handler_motorcycles(call)

    if call.data == '24/7':
        show_biznes_prices(call, '24/7')
    if call.data == '–ú–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã':
        show_biznes_prices(call, '–û–¥–µ–∂–¥–∞')
    if call.data == '–ó–∞–∫—É—Å–æ—á–Ω—ã–µ':
        show_biznes_prices(call, '–ó–∞–∫—É—Å–æ—á–Ω—ã–µ')
    if call.data == '–ê–≤—Ç–æ—Å–∞–ª–æ–Ω—ã/–ú–æ—Ç–æ—Å–∞–ª–æ–Ω—ã':
        show_biznes_prices(call, '–ê–≤—Ç–æ/–ú–æ—Ç–æ')
    if call.data == '–ê–º—É–Ω–∏—Ü–∏–∏':
        show_biznes_prices(call, '–ê–º—É–Ω–∏—Ü–∏—è')
    if call.data == '–ö–∞–∑–∏–Ω–æ':
        show_biznes_prices(call, '–ö–∞–∑–∏–Ω–æ')
    if call.data == '–ê–≤—Ç–æ–º–∞—Å—Ç–µ—Ä—Å–∫–∏–µ':
        show_biznes_prices(call, '–ê–≤—Ç–æ–º–∞—Å—Ç–µ—Ä—Å–∫–∏–µ')
    if call.data == '–ú–∞–≥–∞–∑–∏–Ω—ã –∞–∫—Å—Å–µ—Å—É–∞—Ä–æ–≤':
        show_biznes_prices(call, '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã')
    if call.data == '–ê–ó–°':
        show_biznes_prices(call, '–ê–ó–°')

    if call.data == 'auc':
        bot.send_message(call.message.chat.id, "–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        handler_guides(call)
    if call.data == 'generate_link':
        handle_generate_link(call)


COINS_PER_REFERRAL = 100


def more_info_withdraw(call):
    bot.send_photo(call.message.chat.id, photo=open('balance.jpg', 'rb'),
                   caption="HypeCoin - —ç—Ç–æ –∏–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤—ã–ø–æ–ª–Ω—è—è –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è.\n\nHypeCoin –º–æ–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É, –≤—Å–µ–≥–æ –ª–∏—à—å —É–∫–∞–∑–∞–≤ –Ω–∏–∫, —Å—á–µ—Ç –∏ —Å–µ—Ä–≤–µ—Ä.\n\n‚Äî –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –ø–æ —Å–≤–æ–µ–π —Ä–µ—Ñ. —Å—Å—ã–ª–∫–µ. –ó–∞ –∫–∞–∂–¥–æ–≥–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å –ø–æ 100 HypeCoin\n‚Äî –£—á–∞—Å—Ç–≤—É–π –∏ –ø–æ–±–µ–∂–¥–∞–π –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö –æ—Ç Black Russia Hype\n‚Äî –ó–∞ –∫–∞–∂–¥—ã–π –ø–µ—Ä–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥ –ø–æ—Å—Ç–æ–º –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 25 HypeCoin\n\n–ò –Ω–µ –∑–∞–±—ã–≤–∞–π —Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏–∏! ü§Ø\n\n1000 HypeCoin - 1.000.000 –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç—ã.")


def get_user_info(user_id):
    user_id = str(user_id)
    if user_id not in users:
        users[user_id] = {
            'balance': 0,
            'referrals': [],
            'promocodes': []
        }
    return users[str(user_id)]


def handle_give_balance(call):
    bot.send_message(call.message.chat.id,
                     "–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ HypeCoin (–Ω–∞–ø—Ä–∏–º–µ—Ä: @username 100):")
    bot.register_next_step_handler(call.message, process_give_balance)


def hand_balance(call):
    user_id = call.message.chat.id
    button1 = types.InlineKeyboardButton("üìÉ–í—ã–≤–µ—Å—Ç–∏ HypeCoin",
                                         callback_data='withdraw')
    button3 = types.InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ—Ç —Å–∏—Å—Ç–µ–º–µ",
                                         callback_data='more_info_withdraw')
    button2 = types.InlineKeyboardButton("–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞",
                                         callback_data='your_ref')
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(button1)
    keyboard.add(button2)
    keyboard.add(button3)
    bot.send_message(call.message.chat.id, f"–í–∞—à –±–∞–ª–∞–Ω—Å: {users[str(user_id)]['balance']} HypeCoin.",
                     reply_markup=keyboard)


def withdraw_process(message, user_data):
    user_id = message.chat.id
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        start(message)
        return
    try:
        if "nick" not in user_data:
            bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫/–Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ (Nick_Name, 123123)")
            bot.register_next_step_handler(message, lambda m: withdraw_process(m, {**user_data, "nick": m.text}))
        elif "server" not in user_data:
            bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å–µ—Ä–≤–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∏–Ω–¥–∏–≥–æ)")
            bot.register_next_step_handler(message, lambda m: withdraw_process(m, {**user_data, "server": m.text}))
        elif "amount" not in user_data:
            bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ HypeCoin –¥–ª—è –≤—ã–≤–æ–¥–∞ (–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ - 1000).")
            bot.register_next_step_handler(message, lambda m: withdraw_process(m, {**user_data, "amount": m.text}))
        elif "email" not in user_data:
            bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É.")
            bot.register_next_step_handler(message, lambda m: withdraw_process(m, {**user_data, "email": m.text}))
        else:
            nick = user_data["nick"]
            server = user_data["server"]
            amount = float(user_data["amount"])  # Convert amount to float
            email = user_data["email"]
            if amount < 1000:
                bot.send_message(user_id, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ - 1000 HypeCoin")
            elif amount > users[str(user_id)]["balance"]:
                bot.send_message(user_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
            else:
                # Send withdrawal request to admins
                admin_id = [786320574, 1079020959]
                for id in admin_id:
                    bot.send_message(id, f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ HypeCoin:\n"
                                         f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n"
                                         f"–ù–∏–∫/–Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞: {nick}\n"
                                         f"–°–µ—Ä–≤–µ—Ä: {server}\n"
                                         f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount} HypeCoin\n"
                                         f"–ü–æ—á—Ç–∞: {email}")

                # Deduct HypeCoin from user's balance
                users[str(user_id)]["balance"] -= amount
                save_data()
                bot.send_message(user_id, f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount} HypeCoin –ø—Ä–∏–Ω—è—Ç–∞. "
                                          f"–°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

    except ValueError:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ HypeCoin. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(message, lambda m: withdraw_process(m, user_data))


def process_give_balance(message):
    if message.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        start(message)
        return
    try:
        username, amount = message.text.split()
        amount = int(amount)
        if username.startswith("@"):
            username = username[1:]

            user_id = None
            for uid, user_data in users.items():
                if user_data.get('username') == username:
                    user_id = int(uid)  # Convert uid to integer
                    break

            if user_id:
                user_info = get_user_info(user_id)
                user_info['balance'] += amount
                bot.send_message(message.chat.id,
                                 f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} HypeCoin.")
                bot.send_message(user_id,
                                 f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} HypeCoin. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_info['balance']} HypeCoin.")
                save_data()
            else:
                bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ @username.")
    except (ValueError, IndexError):
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ @username –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ HypeCoin.")


def reward_promocode(referrer_id, amount):
    user_info = get_user_info(referrer_id)
    user_info['balance'] += amount
    bot.send_message(referrer_id, f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} HypeCoin –∑–∞ –ø—Ä–æ–º–æ–∫–æ–¥! ")


def reward_referrer(referrer_id):
    print("reward")
    user_info = get_user_info(referrer_id)
    user_info['balance'] += COINS_PER_REFERRAL
    bot.send_message(referrer_id, f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {COINS_PER_REFERRAL} HypeCoin –∑–∞ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞! "
                                  f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user_info['balance']} HypeCoin.")


def check_subscription_and_reward(user_id, referrer_id=None):
    chat_member = bot.get_chat_member(chat_id="@blackrussiahype", user_id=user_id)
    if chat_member.status in ['creator', 'administrator', 'member'] and int(user_id) != int(referrer_id):
        if referrer_id:
            print(f"{int(user_id)} ref {int(referrer_id)}")

            reward_referrer(referrer_id)
    else:
        users[str(referrer_id)]['referrals'].remove(user_id)


@bot.message_handler(commands=['start'])
def start(message):
    load_data()
    user_id = str(message.chat.id)
    if str(user_id) not in users:
        username = message.from_user.username
        users[user_id] = {"balance": 0, "promocodes": [], "referrals": [], "username": username}

    for ref in users[user_id]['referrals']:
        chat_member = bot.get_chat_member(chat_id="@blackrussiahype", user_id=ref)
        if chat_member.status not in ['creator', 'administrator', 'member']:
            bot.send_message(message.chat.id,
                             '–û–¥–∏–Ω –∏–∑ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –≥—Ä—É–ø–ø—ã, –º—ã –≤—ã–Ω—É–∂–¥–µ–Ω—ã —Å–Ω—è—Ç—å —Å –≤–∞—Å –±–æ–Ω—É—Å')
            users[user_id]['balance'] -= COINS_PER_REFERRAL
            users[user_id]['referrals'].remove(ref)
    parts = message.text.split()
    if message.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        pass
    elif len(parts) > 1 and parts[1].startswith('code_'):
        _, code = parts
        reward_data = reward_links.get(code)
        if reward_data and reward_data["uses"] > 0:
            if code not in users[user_id]['promocodes']:
                amount = reward_data["amount"]
                reward_promocode(message.chat.id, amount=amount)
                users[user_id]['promocodes'].append(code)
                reward_links[code]['uses'] -= 1

                if reward_links[code]['uses'] == 0:
                    del reward_links[code]

                    save_data()

    elif len(parts) > 1:
        referrers_id = int(parts[1])
        referrer_info = get_user_info(referrers_id)

        is_already_referred = False
        for referrer_id in users:
            if user_id in users[referrer_id]['referrals']:
                is_already_referred = True
                break

        if not is_already_referred and int(user_id) != referrers_id:
            referrer_info['referrals'].append(user_id)
            check_subscription_and_reward(user_id, referrers_id)

        user_info = get_user_info(user_id)


    chat_member = bot.get_chat_member(chat_id="@blackrussiahype", user_id=message.chat.id)
    if chat_member.status not in ['creator', 'administrator', 'member']:
        keyboard1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
        text_button = types.KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        keyboard1.add(text_button)
        bot.send_message(message.chat.id, "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @blackrussiahype.",
                         reply_markup=keyboard1)
        return
    else:
        keyboard = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("üìÉ–ì–∞–π–¥—ã –∏ –ø—Ä–æ—á–µ–µ",
                                             callback_data='guides')
        button2 = types.InlineKeyboardButton("–†—ã–Ω–æ–∫",
                                             callback_data='market')
        button3 = types.InlineKeyboardButton("üì©–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å",
                                             callback_data='offer_news')
        button4 = types.InlineKeyboardButton("‚ú®–ù–∞–ø–∏—Å–∞–Ω–∏–µ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏",
                                             callback_data='write_biography')
        button5 = types.InlineKeyboardButton("üí∏ –ë–∞–ª–∞–Ω—Å",
                                             callback_data='hand_balance')
        keyboard.add(button5)
        keyboard.add(button1)
        # keyboard.add(button2)
        keyboard.add(button3)
        keyboard.add(button4)

        if message.chat.id in admin_users:
            button6 = types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —á–µ–∫",
                                                 callback_data='generate_link')
            keyboard.add(button6)
            button10 = types.InlineKeyboardButton("–í—ã–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='give_balance')
            keyboard.add(button10)
        # server_info = get_server_info()
        button6 = types.InlineKeyboardButton("–û–Ω–ª–∞–π–Ω —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data='server_online')
        # keyboard.add(button6)
        bot.send_message(message.chat.id,
                         f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç",
                         reply_markup=keyboard)
    save_data()


def handle_generate_link(call):
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:")
    bot.register_next_step_handler(call.message, get_max_uses)  # Start collecting information


def get_max_uses(message):
    try:
        if message.text == '/start' or message.text == '/admin' or message.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' or message.text == '‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å':
            start(message)
        else:
            max_uses = int(message.text)
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã:")
            bot.register_next_step_handler(message, get_amount, max_uses)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(message, get_max_uses)


def get_amount(message, max_uses):
    try:
        if message.text == '/start' or message.text == '/admin' or message.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' or message.text == '‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å':
            start(message)
        else:
            amount = int(message.text)
            link = generate_reward_link(amount, max_uses)
            bot.send_message(message.chat.id, f"–°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {link}")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(message, get_amount, max_uses)


reward_links = {}


def generate_reward_link(amount, max_uses=1):
    code = 'code_' + str(uuid.uuid4())
    link = f"https://t.me/BlackRussiaHype_bot?start={code}"
    reward_links[code] = {"amount": amount, "uses": max_uses}
    save_data()
    return link


@bot.message_handler(commands=['balance'])
def show_balance(message):
    user_id = message.chat.id
    user_info = get_user_info(user_id)
    bot.send_message(user_id, f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user_info['balance']} HypeCoin.\n")
    # f"–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: {', '.join([f'[{ref}](tg://user?id={ref})' for ref in user_info['referrals']])}", parse_mode="Markdown")


@bot.message_handler(commands=['ref'])
def get_referral_link(message):
    user_id = message.chat.id
    referral_link = f"https://t.me/BlackRussiaHype_bot?start={user_id}"
    bot.send_message(user_id,
                     f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}\n\n–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∞–π 100 HypeCoin!")


def handler_guides(call):
    user_id = call.message.chat.id
    keyboard = types.InlineKeyboardMarkup()
    # Add buttons for guides with links
    button1 = types.InlineKeyboardButton("‚ú®–ü—Ä–æ–º–æ–∫–æ–¥—ã", url="https://telegra.ph/PROMOKODY-03-28")
    button2 = types.InlineKeyboardButton("üîíNonRP –æ–±–º–∞–Ω—ã",
                                         url="https://telegra.ph/Kak-izbezhat-NonRP-obmana-i-ego-popytki-03-28")
    button3 = types.InlineKeyboardButton("üìå–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–æ–µ–∫—Ç–∞",
                                         url="https://telegra.ph/Osnovnye-resursy-proekta-03-27")
    button4 = types.InlineKeyboardButton("üóí–®–∞–±–ª–æ–Ω—ã –¥–ª—è —Ö–µ–ª–ø–µ—Ä–æ–≤",
                                         url="https://telegra.ph/25-SHABLONY-OTVETOV-NA-VOPROSY-IGROKOV-DLYA-HELPEROV-03-27")
    button5 = types.InlineKeyboardButton("üìà–ü—Ä–æ–∫–∞—á–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data='level_up_info')
    button6 = types.InlineKeyboardButton("üìÉ–í—Å–µ –∫–æ–º–∞–Ω–¥—ã", url="https://telegra.ph/SPISOK-VSEH-KOMAND-03-28")
    button7 = types.InlineKeyboardButton("üìä–û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞",
                                         url="https://telegra.ph/Kak-zaletat-na-otkrytie-novogo-servera-03-28")
    button8 = types.InlineKeyboardButton("üíª –†–ü –æ—Ç—ã–≥—Ä–æ–≤–∫–∏", url="https://telegra.ph/Black-Russia--RP-otygrovki-04-08")
    button9 = types.InlineKeyboardButton("üíº–í—ã—Å–æ–∫–æ–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–µ —Ä–∞–±–æ—Ç—ã –∏ –ó–ü", url="https://telegra.ph/Raboty-04-08")
    button11 = types.InlineKeyboardButton("üöó –¶–µ–Ω—ã –Ω–∞ –ê–≤—Ç–æ",
                                          callback_data='car_prices')
    button13 = types.InlineKeyboardButton("üí∏ –¶–µ–Ω—ã –≥–æ—Å—Å –±–∏–∑–Ω–µ—Å–æ–≤",
                                          callback_data='biznes_prices')
    button12 = types.InlineKeyboardButton("üõ†–ê—É–∫—Ü–∏–æ–Ω",
                                          callback_data='auc')

    # Add buttons to go back to main menu
    button10 = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='main_menu')

    keyboard.add(button1, button2)
    keyboard.add(button5, button6)
    keyboard.add(button3)
    keyboard.add(button4)
    keyboard.add(button7)
    keyboard.add(button8)
    keyboard.add(button9)
    keyboard.add(button11)
    keyboard.add(button12)
    keyboard.add(button13)
    keyboard.add(button10)

    bot.send_message(call.message.chat.id,
                     f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≥–∞–π–¥:",
                     reply_markup=keyboard)


def main_menu(call):
    load_data()
    user_id = str(call.message.chat.id)

    for ref in users[user_id]['referrals']:
        chat_member = bot.get_chat_member(chat_id="@blackrussiahype", user_id=ref)
        if chat_member.status not in ['creator', 'administrator', 'member']:
            bot.send_message(call.message.chat.id,
                             '–û–¥–∏–Ω –∏–∑ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –≥—Ä—É–ø–ø—ã, –º—ã –≤—ã–Ω—É–∂–¥–µ–Ω—ã —Å–Ω—è—Ç—å —Å –≤–∞—Å –±–æ–Ω—É—Å')
            users[user_id]['balance'] -= COINS_PER_REFERRAL
            users[user_id]['referrals'].remove(ref)

    chat_member = bot.get_chat_member(chat_id="@blackrussiahype", user_id=call.message.chat.id)
    if chat_member.status not in ['creator', 'administrator', 'member']:
        keyboard1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
        text_button = types.KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        keyboard1.add(text_button)
        bot.send_message(call.message.chat.id, "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @blackrussiahype.",
                         reply_markup=keyboard1)
        return
    else:
        keyboard = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("üìÉ–ì–∞–π–¥—ã –∏ –ø—Ä–æ—á–µ–µ",
                                             callback_data='guides')
        button2 = types.InlineKeyboardButton("–†—ã–Ω–æ–∫",
                                             callback_data='market')
        button3 = types.InlineKeyboardButton("üì©–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å",
                                             callback_data='offer_news')
        button4 = types.InlineKeyboardButton("‚ú®–ù–∞–ø–∏—Å–∞–Ω–∏–µ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏",
                                             callback_data='write_biography')
        button5 = types.InlineKeyboardButton("üí∏ –ë–∞–ª–∞–Ω—Å",
                                             callback_data='hand_balance')
        keyboard.add(button5)
        keyboard.add(button1)
        # keyboard.add(button2)
        keyboard.add(button3)
        keyboard.add(button4)

        if call.message.chat.id in admin_users:
            button6 = types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å —á–µ–∫",
                                                 callback_data='generate_link')
            keyboard.add(button6)
            button10 = types.InlineKeyboardButton("–í—ã–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='give_balance')
            keyboard.add(button10)
        # server_info = get_server_info()
        button6 = types.InlineKeyboardButton("–û–Ω–ª–∞–π–Ω —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data='server_online')
        # keyboard.add(button6)
        bot.send_message(call.message.chat.id,
                         f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç",
                         reply_markup=keyboard)
    save_data()


# def get_server_info():
#    response = requests.get("https://api-backup111.blackrussia.online/servers.json")
#    res = response.json()
#    return res

def create_online_button(server_data):
    if server_data:
        server_name = server_data["name"]
        online = server_data["online"]
        max_online = server_data["maxonline"]
        return f"**{server_name}**: {online}/{max_online}"
    else:
        return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"


def handler_low_class_cars(call):
    show_car_prices(call, "–ù–∏–∑–∫–∏–π –∫–ª–∞—Å—Å")


def handler_luxury_cars(call):
    show_car_prices(call, "–ö–ª–∞—Å—Å –õ—é–∫—Å")


def handler_luxury_cars_2(call):
    show_car_prices(call, "–ö–ª–∞—Å—Å –õ—é–∫—Å 2")


def handler_motorcycles(call):
    show_car_prices(call, "–ú–æ—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")


@bot.message_handler(func=lambda message: True)  # Place this handler after the start handler
def handle_all_messages(message):
    chat_member = bot.get_chat_member(chat_id="@blackrussiahype", user_id=message.chat.id)
    if chat_member.status not in ['creator', 'administrator', 'member']:
        keyboard1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
        text_button = types.KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        keyboard1.add(text_button)
        bot.send_message(message.chat.id, "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @blackrussiahype.",
                         reply_markup=keyboard1)
        return
    else:
        if hasattr(message, 'text') and message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            start(message)
        else:  # Handle other types of messages or do nothing
            pass


def show_car_prices(call, car_type):
    user_id = call.message.chat.id

    # –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ü–µ–Ω–∞—Ö
    car_prices = {
        "–ù–∏–∑–∫–∏–π –∫–ª–∞—Å—Å": """
    MAZDA SEDAN 3 | 380.000 | (218–∫–º/—á)| (8.1)
TOYOTA MARK  |  420.000| (223–∫–º/—á) (9) |
MERCEDES-BENZ W124 |  440.000
JEEP GRAND CHEROKEE |  450.000
AUDI 100 C4|520.000| | (242–∫–º/—á) (5.6)
BMW M3 E36 |  600.000 | (239–∫–º/—á)| (5.0)
MERCEDES-BENZ E420 W210 | 700.000 | (250–∫–º/—á) (6)
LADA VESTA SEDAN | 700.000 |(184–∫–º/—á) (9.3)
AUDI A6 C5 | 1.000.000 |(248–∫–º/—á) (5.8)
    """,
        "–ö–ª–∞—Å—Å –õ—é–∫—Å": """
    VOLVO XC90|4.200.000| (248–∫–º/—á) (5.6)
CHEVROLETTE CAMARO ZL1|4.600.000|(—Å–∫—Ä–∏–Ω) (315–∫–º/—á) (4)
BMW Z4 M40I|4.900.000| (259–∫–º/—á) (4.5)
BMW M4 F84|5.500.000| (261–∫–º/—á) (4)
FORD RAPTOR F-150|5.757.000| (211–∫–º/—á) (6.1)
AUDI Q8|6.000.000| (248–∫–º/—á) (4.5)
DODGE DEMON SRT|6.100.000|(322–∫–º/—á) (2.5)
MERCEDES-BENZ C63s AMG| 6.200.000 (278–∫–º/—á) (3.9)
MERCEDES-BENZ GT63s|7.000.000| (313–∫–º/—á) (3.2)
AUDI Q7|7.000.000|(—Å–∫—Ä–∏–Ω) (238–∫–º/—á) (6.1)
TOYOTA LAND CRUISER 200 |7.800.000|(—Å–∫—Ä–∏–Ω) (220–∫–º/—á) (8.6)
CADILLAC ESCALADE|7.200.000| (248–∫–º/—á) (6.4)
NISSAN GT-R R35|7.900.000| (319–∫–º/—á) (2.7)
BMW X6M F16|8.200.000| (284–∫–º/—á) (4.1)
PORSHE PANAMERA S|8.400.000| (310–∫–º/—á) (3.7)
AUDI RS6|8.500.000| (306–∫–º/—á) (3.9)
PORSCHE 911 CARRERA S |9.000.000|  (309–∫–º/—á) (3.7)
MERCEDES-BENZ GLS 400 |9.150.000|(—Å–∫—Ä–∏–Ω) (240–∫–º/—á) (6.4)
BMW M5 F90|9.500.000| (312–∫–º/—á) (3.4)
AUDI RS7 SPORT|9.500.000| (252–∫–º/—á) (3.2)
RANGE ROVER SVR|10.000.000| (262–∫–º/—á) (4.9)
AUDI RS6 C7 —Ä–µ—Å—Ç–∞–π–ª–∏–Ω–≥|10.000.000| (310–∫–º/—á) (3.7)
Mercedes-Benz CLS53 AMG|11.300.000| (305–∫–º/—á) (3.5)
BMW X7 M50I|10.500.000| (250–∫–º/—á) (4.6)
Lexus LX570|11.450.000| (230–∫–º/—á) (6.9)
    """,
        "–ö–ª–∞—Å—Å –õ—é–∫—Å 2": """
    CADILLAC ESCALADE|11.500.000| (210–∫–º/—á) (6.4)
MERCEDES-BENZ E63S |11.500.000| (314–∫–º/—á) (3.2)
BMW I8 EDRIVE |12.600.000| (320–∫–º/—á) (4.5)
MERCEDES-BENZ GT-R |13.500.000| (319–∫–º/—á) (3.5)
McLaren 600LT|14.000.000| (329–∫–º/—á) (2.9)
TESLA MODEL S|15.000.000| (252–∫–º/—á) (3.2)
LAMBORDGHINI URUS|15.300.000| (305–∫–º/—á) (3.5)
LAMBORGHINI HURACAN|16.500.000| (330–∫–º/—á) (2.9)
MERCEDES-BENZ G65 AMG|17.050.000| (223–∫–º/—á) (5.3)
BMW M8 F92|17.200.000| (312–∫–º/—á) (3.4)
FERRARI 488 GTB|17.500.000| (336–∫–º/—á) (3)
PORSCHE TAYCAN TURBO S|18.300.000| (254–∫–º/—á) (3.2)
ASTON MARTIN DB11|18.500.000| (322–∫–º/—á) (3.9)
BMW M8 F93 GRAN COUPE|19.000.000| (312–∫–º/—á) (3.2)
LAMBORGHINI AVENTADOR S|20.000.000| (351–∫–º/—á) (2.7)
TESLA MODEL X|21.000.000| (256–∫–º/—á) (3.4)
MERCEDES-BENZ G63 AMG|23.000.000| (223–∫–º/—á) (5.0)
MERCEDES-BENZ MB S650|25.000.000| (248–∫–º/—á) (5)
Rolls-Royce Wraith|35.000.000| (264–∫–º/—á) (4.5)
Rolls-Royce Cullinan|40.000.000| (260–∫–º/—á) (5.1)
Rolls-Royce Phantom|50.000.000| (265–∫–º/—á) (5.3)
Bugatti Divo|380.000.000| (380–∫–º/—á) (2.4)
Bugatti La Noire|1.000.000.000|(400–∫–º/—á) (2.2)
    """,
        "–ú–æ—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç": """ 
    Racer Sport|20.000|(130–∫–º/—á) (10)
–ú–∏–Ω—Å–∫ 125|300.000|(205–∫–º/—á) (4)
Aprilla MXV 450|90.000|(200–∫–º/—á) (4.1)
Ducati SuperSport S|1.830.000|(240–∫–º/—á) (3.5)
Ducati XDiavel S|3.000.000|(260–∫–º/—á) (3)
Yamaha FZ-10|4.500.000|(257–∫–º/—á) (2.5)
Yamaha YZF-R6|5.000.000|(260–∫–º/—á) (3.2)
BMW S 1000 RR|7.000.000|(295–∫–º/—á) (3)
Suzuki GSX-R750|8.000.000|(276–∫–º/—á) (3.2)
Kawasaki Ninja H2R|10.000.000| (340–∫–º/—á) (2.5)
    """
    }
    keyboard = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("üè†–ú–µ–Ω—é", callback_data='main_menu')
    keyboard.add(button1)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    bot.send_message(user_id, car_prices[car_type], reply_markup=keyboard)


def show_biznes_prices(call, car_type):
    user_id = call.message.chat.id

    # –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ü–µ–Ω–∞—Ö
    business_prices = {
        "24/7": """
            –ú–∞–≥–∞–∑–∏–Ω 24/7 –≥. –Æ–∂–Ω—ã–π (3) –æ–∫–æ–ª–æ –∞–≤—Ç–æ—É–≥–æ–Ω–∞ - 700.000 —Ä—É–±–ª–µ–π
            \n–ú–∞–≥–∞–∑–∏–Ω 24/7 –≥. –Æ–∂–Ω—ã–π (18) –æ–∫–æ–ª–æ –ì–ò–ë–î–î - 500.000 —Ä—É–±–ª–µ–π
            \n–ú–∞–≥–∞–∑–∏–Ω 24/7 –≥. –Æ–∂–Ω—ã–π (20) –æ–∫–æ–ª–æ –£–ú–í–î - 500.000 —Ä—É–±–ª–µ–π
            \n–ú–∞–≥–∞–∑–∏–Ω 24/7 –≥. –Æ–∂–Ω—ã–π (21) –æ–∫–æ–ª–æ –°–ú–ò - 450.000 —Ä—É–±–ª–µ–π
            \n–ú–∞–≥–∞–∑–∏–Ω 24/7 –ø–≥—Ç. –ë–∞—Ç—ã—Ä–µ–≤–æ (6) –æ–∫–æ–ª–æ –§–°–ë - 650.000 —Ä—É–±–ª–µ–π
            \n–ú–∞–≥–∞–∑–∏–Ω 24/7 –≥. –ê—Ä–∑–∞–º–∞—Å, –æ–∫–æ–ª–æ —Å–ø–∞–≤–Ω–∞ - 1.000.000 —Ä—É–±–ª–µ–π
            \n–ú–∞–≥–∞–∑–∏–Ω 24/7 '–ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫'(10) –≥. –ê—Ä–∑–∞–º–∞—Å - 1.000.000 —Ä—É–±–ª–µ–π
            \n–ú–∞–≥–∞–∑–∏–Ω 24/7 –≥. –ê—Ä–∑–∞–º–∞—Å (13) –≤—ã–µ–∑–¥ –∏–∑ –≥–æ—Ä–æ–¥–∞ - 500.000 —Ä—É–±–ª–µ–π
            \n–ú–∞–≥–∞–∑–∏–Ω 24/7 –ø–≥—Ç. –ë–∞—Ç—ã—Ä–µ–≤–æ (15) –æ–∫–æ–ª–æ –∞–≤—Ç–æ—à–∫–æ–ª—ã - 500.000 —Ä—É–±–ª–µ–π
            \n–ú–∞–≥–∞–∑–∏–Ω 24/7 –ê–ó–° (16) –ø–æ —Ç—Ä–∞—Å—Å–µ –≤ —Å—Ç–æ—Ä–æ–Ω—É –ë–∞—Ç—ã—Ä–µ–≤–æ - 450.000 —Ä—É–±–ª–µ–π
            \n–ú–∞–≥–∞–∑–∏–Ω 24/7 –ê–ó–° (22) –æ–∫–æ–ª–æ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞ –ù/–ö - 450.000 —Ä—É–±–ª–µ–π
            \n–ú–∞–≥–∞–∑–∏–Ω 24/7 (23) –æ–∫–æ–ª–æ –†—É–±–ª—ë–≤–∫–∏ - 700.000 —Ä—É–±–ª–µ–π
            \n–ú–∞–≥–∞–∑–∏–Ω 24/7 (24) –≥. –õ—ã—Ç–∫–∞—Ä–∏–Ω–æ - 350.000 —Ä—É–±–ª–µ–π
            \n–ú–∞–≥–∞–∑–∏–Ω 24/7 –ê–ó–° (25) –æ–∫–æ–ª–æ –∑–∞–≤–æ–¥–∞ - 450.000 —Ä—É–±–ª–µ–π
            \n–ú–∞–≥–∞–∑–∏–Ω 24/7 –ê–ó–° (26) —à–æ—Å—Å–µ –≤ —Å—Ç–æ—Ä–æ–Ω—É –ë–∞—Ç—ã—Ä–µ–≤–æ - 450.000 —Ä—É–±–ª–µ–π
            \n–ú–∞–≥–∞–∑–∏–Ω 24/7 –ê–ó–° (37) —Ä. –ï–≥–æ—Ä–æ–≤–∫–∞ - 450.000 —Ä—É–±–ª–µ–π
            \n–ú–∞–≥–∞–∑–∏–Ω 24/7 –ê–ó–° (39) –æ–∫–æ–ª–æ –∞–≤—Ç–æ—É–≥–æ–Ω–∞ - 450.000 —Ä—É–±–ª–µ–π
            \n–ú–∞–≥–∞–∑–∏–Ω 24/7 –ê–ó–° (40) —à–æ—Å—Å–µ –∏–∑ –ë–∞—Ç—ã—Ä–µ–≤–æ –≤ –ê—Ä–∑–∞–º–∞—Å - 450.000 —Ä—É–±–ª–µ–π
        """,
        "–û–¥–µ–∂–¥–∞": """
            –ú–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã –≥. –Æ–∂–Ω—ã–π (1) - 5.000.000 —Ä—É–±–ª–µ–π
            \n–ú–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã –ø–≥—Ç. –ë–∞—Ç—ã—Ä–µ–≤–æ (5) - 2.000.000 —Ä—É–±–ª–µ–π
            \n–ú–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã –≥. –ê—Ä–∑–∞–º–∞—Å (9) - 5.000.000 —Ä—É–±–ª–µ–π
        """,
        "–ó–∞–∫—É—Å–æ—á–Ω—ã–µ": """
            –ó–∞–∫—É—Å–æ—á–Ω–∞—è –ø–≥—Ç. –ë–∞—Ç—ã—Ä–µ–≤–æ (4) –æ–∫–æ–ª–æ –∞–≤—Ç–æ—à–∫–æ–ª—ã - 500.000 —Ä—É–±–ª–µ–π
            \n–ó–∞–∫—É—Å–æ—á–Ω–∞—è –≥. –Æ–∂–Ω—ã–π (2) –æ–∫–æ–ª–æ –∞–≤—Ç–æ—É–Ω–∞ - 900.000 —Ä—É–±–ª–µ–π
            \n–ó–∞–∫—É—Å–æ—á–Ω–∞—è –ø–≥—Ç. –ë–∞—Ç—ã—Ä–µ–≤–æ (7) –æ–∫–æ–ª–æ –∞—Ä–º–∏–∏ - 650.000 —Ä—É–±–ª–µ–π
            \n–ó–∞–∫—É—Å–æ—á–Ω–∞—è –≥. –ê—Ä–∑–∞–º–∞—Å (11) –æ–∫–æ–ª–æ —Å–ø–∞–≤–Ω–∞ - 1.000.000 —Ä—É–±–ª–µ–π
            \n–ó–∞–∫—É—Å–æ—á–Ω–∞—è –≥. –ê—Ä–∑–∞–º–∞—Å, –æ–∫–æ–ª–æ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∞ - 1.000.000 —Ä—É–±–ª–µ–π
            \n–ó–∞–∫—É—Å–æ—á–Ω–∞—è –≥. –ê—Ä–∑–∞–º–∞—Å –Ω–∞ —Å–ø–∞–≤–Ω–µ - 900.000 —Ä—É–±–ª–µ–π
            \n–ó–∞–∫—É—Å–æ—á–Ω–∞—è —Ä. –ï–≥–æ—Ä–æ–≤–∫–∞ (36) - 700.000 —Ä—É–±–ª–µ–π
        """,
        "–ê–≤—Ç–æ/–ú–æ—Ç–æ": """
            –ê–≤—Ç–æ—Å–∞–ª–æ–Ω –Ω–∏–∑–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ (0) - 10.000.000 —Ä—É–±–ª–µ–π
            \n–ê–≤—Ç–æ—Å–∞–ª–æ–Ω —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–ª–∞—Å—Å–∞ (28) - 100.000.000 —Ä—É–±–ª–µ–π
            \n–ê–≤—Ç–æ—Å–∞–ª–æ–Ω –ø—Ä–µ–º–∏—É–º –∫–ª–∞—Å—Å–∞ (27) - 200.000.000 —Ä—É–±–ª–µ–π
            \n–ê–≤—Ç–æ—Å–∞–ª–æ–Ω –≥—Ä—É–∑–æ–≤—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π (38) - 50.000.000 —Ä—É–±–ª–µ–π
            \n–ú–æ—Ç–æ—Å–∞–ª–æ–Ω 'Harley Dayson' (41) –º–µ—Å—Ç–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ - 50.000.000 —Ä—É–±–ª–µ–π
        """,
        "–ê–º—É–Ω–∏—Ü–∏—è": """
            –ê–º—É–Ω–∏—Ü–∏—è –≥. –ê—Ä–∑–∞–º–∞—Å (14) - 1.200.000 —Ä—É–±–ª–µ–π
            \n–ê–º—É–Ω–∏—Ü–∏—è –≥. –Æ–∂–Ω—ã–π (19) - 1.200.000 —Ä—É–±–ª–µ–π
        """,
        "–ö–∞–∑–∏–Ω–æ": "–ö–∞–∑–∏–Ω–æ (30) - 150.000.000 —Ä—É–±–ª–µ–π",
        "–ê–≤—Ç–æ–º–∞—Å—Ç–µ—Ä—Å–∫–∏–µ": """
            –°–¢–û (29) - 50.000.000 —Ä—É–±–ª–µ–π
            \n–¢—é–Ω–∏–Ω–≥ –¢–æ–Ω–∏—Ä–æ–≤–∫–∏ (33) - 70.000.000 —Ä—É–±–ª–µ–π
            \n–¢—é–Ω–∏–Ω–≥ –ó–∞–Ω–∏–∂–µ–Ω–∏—è (34) - 70.000.000 —Ä—É–±–ª–µ–π
            \n–ß–∏–ø-—Ç—é–Ω–∏–Ω–≥ (35) - 70.000.000 —Ä—É–±–ª–µ–π
        """,
        "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã": """
            –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –≥. –Æ–∂–Ω—ã–π (31) –æ–∫–æ–ª–æ –∞–º—É–Ω–∏—Ü–∏–∏ - 10.000.000 —Ä—É–±–ª–µ–π
            \n–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –≥. –ê—Ä–∑–∞–º–∞—Å (32) –æ–∫–æ–ª–æ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–∞ - 10.000.000 —Ä—É–±–ª–µ–π
        """,
        "–ê–ó–°": """
            –ê–ó–° (0) –æ–∫–æ–ª–æ –∞–≤—Ç–æ—É–≥–æ–Ω–∞ - 800.000 —Ä—É–±–ª–µ–π
            \n–ê–ó–° (1) –æ–∫–æ–ª–æ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–∞ –Ω–∏–∑–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ - 800.000 —Ä—É–±–ª–µ–π
            \n–ê–ó–° (2) –æ–∫–æ–ª–æ –¥–µ—Ä–µ–≤–Ω–∏ "–ì–∞—Ä–µ–ª—å" - 800.000 —Ä—É–±–ª–µ–π
            \n–ê–ó–° (3) –æ–∫–æ–ª–æ –∑–∞–≤–æ–¥–∞ - 800.000 —Ä—É–±–ª–µ–π
            \n–ê–ó–° (4) —à–æ—Å—Å–µ –≤ —Å—Ç–æ—Ä–æ–Ω—É –ë–∞—Ç—ã—Ä–µ–≤–æ - 800.000 —Ä—É–±–ª–µ–π
            \n–ê–ó–° (5) –ø–≥—Ç. –ï–≥–æ—Ä–æ–≤–∫–∞ - 800.000 —Ä—É–±–ª–µ–π
            \n–ê–ó–° (6) –≥. –õ—ã—Ç–∫–∞—Ä–∏–Ω–æ - 800.000 —Ä—É–±–ª–µ–π
            \n–ê–ó–° (7) —à–æ—Å—Å–µ –∏–∑ –≥. –ê—Ä–∑–∞–º–∞—Å–∞ –≤ –ë–∞—Ç—ã—Ä–µ–≤–æ - 800.000 —Ä—É–±–ª–µ–π
        """,
    }
    keyboard = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("üè†–ú–µ–Ω—é", callback_data='main_menu')
    keyboard.add(button1)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    bot.send_message(user_id, business_prices[car_type], reply_markup=keyboard)


def handler_car_prices(call):
    user_id = call.message.chat.id
    keyboard = types.InlineKeyboardMarkup(row_width=2)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤ –º–∞—à–∏–Ω
    button1 = types.InlineKeyboardButton("–ù–∏–∑–∫–∏–π –∫–ª–∞—Å—Å", callback_data='low_class_cars')
    button2 = types.InlineKeyboardButton("–ö–ª–∞—Å—Å –õ—é–∫—Å", callback_data='luxury_cars')
    button3 = types.InlineKeyboardButton("–ö–ª–∞—Å—Å –õ—é–∫—Å 2", callback_data='luxury_cars_2')
    button4 = types.InlineKeyboardButton("–ú–æ—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", callback_data='motorcycles')
    button5 = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='guides')

    keyboard.add(button1, button2, button3, button4, button5)
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:", reply_markup=keyboard)


def handler_biznes_prices(call):
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    button1 = types.InlineKeyboardButton("24/7", callback_data='24/7')
    button2 = types.InlineKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã", callback_data='–ú–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã')
    button3 = types.InlineKeyboardButton("–ó–∞–∫—É—Å–æ—á–Ω—ã–µ", callback_data='–ó–∞–∫—É—Å–æ—á–Ω—ã–µ')
    button4 = types.InlineKeyboardButton("–ê–≤—Ç–æ—Å–∞–ª–æ–Ω—ã/–ú–æ—Ç–æ—Å–∞–ª–æ–Ω—ã", callback_data='–ê–≤—Ç–æ—Å–∞–ª–æ–Ω—ã/–ú–æ—Ç–æ—Å–∞–ª–æ–Ω—ã')
    button6 = types.InlineKeyboardButton("–ê–º—É–Ω–∏—Ü–∏–∏", callback_data='–ê–º—É–Ω–∏—Ü–∏–∏')
    button7 = types.InlineKeyboardButton("–ö–∞–∑–∏–Ω–æ", callback_data='–ö–∞–∑–∏–Ω–æ')
    button8 = types.InlineKeyboardButton("–ê–≤—Ç–æ–º–∞—Å—Ç–µ—Ä—Å–∫–∏–µ", callback_data='–ê–≤—Ç–æ–º–∞—Å—Ç–µ—Ä—Å–∫–∏–µ')
    button9 = types.InlineKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω—ã –∞–∫—Å—Å–µ—Å—É–∞—Ä–æ–≤", callback_data='–ú–∞–≥–∞–∑–∏–Ω—ã –∞–∫—Å—Å–µ—Å—É–∞—Ä–æ–≤')
    button10 = types.InlineKeyboardButton("–ê–ó–°", callback_data='–ê–ó–°')
    button5 = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='guides')

    keyboard.add(button1, button2, button3, button4, button6, button7, button8, button9, button10, button5)
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞:", reply_markup=keyboard)


def handler_offer_news(call):
    user_id = call.message.chat.id
    bot.send_message(user_id,
                     "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –≤–∏–¥–µ–æ –∏ –ª—é–±—É—é –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è.\n\n–í—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π!\n\n–í —Å–ª—É—á–∞–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –Ω–æ–≤–æ—Å—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—á–∏—Å–ª–∏—Ç –≤–∞–º 100 HypeCoin")
    bot.register_next_step_handler(call.message, process_news_suggestion)


biographies = {}


def get_biography_info(message):
    user_id = message.chat.id
    biographies[user_id] = {}
    bio_data = {}
    current_question = 0  # Keep track of the current question

    def ask_next_question():
        nonlocal current_question
        if current_question < len(questions):
            question = questions[current_question]
            bot.send_message(user_id, question)
            bot.register_next_step_handler(message, collect_bio_data, bio_data)
        else:
            bot.send_message(user_id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è...")
            generate_biography(user_id, bio_data)  # All questions answered

    def collect_bio_data(message, bio_data):
        nonlocal current_question
        user_id = message.chat.id
        data = message.text
        if data == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            start(message)
            return

        # Check if the message is a reply to a question
        if message.reply_to_message:
            question = message.reply_to_message.text
            bio_data[question] = data
            biographies[user_id][question] = data
            print(bio_data)
            current_question += 1  # Move to the next question only if the user replied correctly
        else:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é '–û—Ç–≤–µ—Ç–∏—Ç—å'.")
        ask_next_question()  # Ask the same question again if the user didn't reply correctly

    ask_next_question()  # Start the conversation


def process_news_suggestion(message):
    news_suggestion = message.text
    user_mention = f"@{message.from_user.username}"

    if news_suggestion == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        start(message)
        return

    admin_id = [786320574, 1079020959]  # ID of the user to receive suggestions
    keyboard = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("üè†–ú–µ–Ω—é", callback_data='main_menu')
    keyboard.add(button1)

    for id in admin_id:
        # If it's a text message, send it directly
        if message.content_type == 'text':
            bot.send_message(id, f"–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç {user_mention}:\n\n{news_suggestion}")
        # If it's a photo, send it with the caption
        elif message.content_type == 'photo':
            bot.send_photo(id, message.photo[-1].file_id,
                           caption=f"–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç {user_mention}:\n\n{message.caption}")
        # If it's a video, send it with the caption
        elif message.content_type == 'video':
            bot.send_video(id, message.video.file_id,
                           caption=f"–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç {user_mention}:\n\n{message.caption}")
        # Handle other content types as needed

    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏!", reply_markup=keyboard)


def handler_write_biography(call):
    user_id = call.message.chat.id
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    bot.send_message(user_id,
                     "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à—É RP-–±–∏–æ–≥—Ä–∞—Ñ–∏—é!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é '–û—Ç–≤–µ—Ç–∏—Ç—å'.",
                     reply_markup=keyboard)
    get_biography_info(call.message)


def generate_biography(user_id, bio_data):
    keyboard = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("üè†–ú–µ–Ω—é", callback_data='main_menu')
    keyboard.add(button1)

    for key, value in bio_data.items():
        if isinstance(value, set):
            bio_data[key] = list(value)
    # Create the prompt for ChatGPT
    prompt = (
            "–ù–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω—É—é roleplay –±–∏–æ–≥—Ä–∞—Ñ–∏—é –∏—Å—Ö–æ–¥—è –∏–∑ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö:\n\n"
            + "\n".join(f"{question}: {answer}" for question, answer in biographies[user_id].items())
            + "\n\n( –û—Ç —Å—é–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞—Å–ø–∏—Å–∞—Ç—å –∫–∞–∂–¥—ã–π –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –ø–æ –ø—Ä–∏–º–µ—Ä—É, –Ω–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–π –≤ —Ç—É–ø—É–± —Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–∏–º–µ—Ä–∞, –ø—Ä–∏–¥—É–º–∞–π —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é –∏—Å—Ö–æ–¥—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö)\n\n–ü—Ä–∏–º–µ—Ä: –î–µ—Ç—Å—Ç–≤–æ: –≤—Å–µ –¥–µ—Ç—Å—Ç–≤–æ –°–∞–∏ –ø—Ä–æ—à–ª–æ –≤ –ü–≥—Ç. –ë–∞—Ç—ã—Ä–µ–≤–æ,—Ä–æ—Å –æ–Ω –≤ –Ω–µ —Å–∞–º–æ–π –±–æ–≥–∞—Ç–æ–π —Å–µ–º—å–µ,–ü–∞–ø–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –±—ã–ª –ª–µ–π—Ç–µ–Ω–∞–Ω—Ç–æ–º –ì–ò–ë–î–î.–Ω–æ –∑–∞—Ä–ø–ª–∞—Ç—ã —Ö–≤–∞—Ç–∞–ª–æ –ª–∏—à—å –Ω–∞ –ø—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ –¥–µ—Ç–µ–π,–ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ—Ç—Ü–∞ –ø–æ–¥—Å—Ç–∞–≤–∏–ª–∏ –Ω–∞ —Ä–∞–±–æ—Ç–µ,–∏ –æ–±–º–∞–Ω—É–ª–∏ –Ω–∞ 2-—Ö –º–µ—Å—è—á–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É,—É –Ω–µ–≥–æ –∑–∞—Ç–∞–∏–ª–∞—Å—å –≥–ª—É–±–æ–∫–∞—è –æ–±–∏–¥–∞ –Ω–∞ –≤—Å–µ—Ö —Ç–µ—Ö –ª—é–¥–µ–π –∫–æ—Ç–æ—Ä—ã–µ —É—á–∞–≤—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –µ–≥–æ –æ–±–º–∞–Ω–µ,—á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø–∞–ø–∞ —É–∑–Ω–∞–ª –æ –û–ü–ì –≥–æ—Ä–æ–¥–∞ –ë–∞—Ç—ã—Ä–µ–≤–æ,—Ç–∞–º –µ–º—É –æ–±–µ—â–∞–ª–∏ –±–æ–ª—å—à–∏–µ –¥–µ–Ω—å–≥–∏,–∏ –æ—á–µ–Ω—å –≥—Ä–æ–º–∫–∏–µ –¥–µ–ª–∞,–ø–∞–ø–µ –Ω–µ –æ—Å—Ç–∞–≤–∞–ª–æ—Å—å –≤—ã–±–æ—Ä–∞ —Ç.–∫ –Ω—É–∂–Ω–æ –±—ã–ª–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–µ–º—å—é –∏ –æ–Ω –≤—Å—Ç—É–ø–∏–ª –≤ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É,–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –µ–≥–æ —Ç–∞–º –Ω–∏–∫—Ç–æ –Ω–µ —É–≤–∞–∂–∞–ª,–∏ —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ–º–æ–≥–æ ¬´–∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–∞¬ª –æ–Ω —Ç–∞–º –Ω–µ –∏–º–µ–ª,–Ω–æ –ø–æ—Å–ª–µ –ø–∞—Ä—ã –≥—Ä–æ–º–∫–∏—Ö –¥–µ–ª –≤ –ì.–Æ–∂–Ω—ã–π –∏ –≤ –ì. –ê—Ä–∑–∞–º–∞—Å,–æ–Ω –±—ã–ª –ø–æ–≤—ã—à–µ–Ω –ø–æ –º–∞—Å—Ç–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–ª –Ω–µ —Å–∞–º—ã–º —á–µ—Å—Ç–Ω—ã–º –ø—É—Ç–µ–º –±–æ–ª—å—à–∏–µ –¥–µ–Ω—å–≥–∏,–Ω–æ –≤ –∫–æ–Ω—Ü–µ –∫–æ–Ω—Ü–æ–≤,–±—ã–ª —É–±–∏—Ç –ø—Ä–∏ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–∏ –ì—Ä—É–∑–æ–≤–∏–∫–∞ –ò–Ω–∫–æ—Å–∞—Ç–æ—Ä–æ–≤ –ø–µ—Ä–µ–≤–æ–∑—è—â–∏—Ö –±–æ–ª—å—à–µ –º–∏–ª–ª–∏–æ–Ω–∞ —Ä—É–±–ª–µ–π,–≤ —Ç–æ –≤—Ä–µ–º—è –∫–∞–∫ –º–∞–º–∞ –±—ã–ª–∞ –æ–±—ã—á–Ω–æ–π –¥–æ–º–æ—Ö–æ–∑—è–π–∫–æ–π,–∏ –Ω–µ –æ –∫–∞–∫–∏—Ö –µ–≥–æ –ø—Ä–µ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–ª–∞—Ö –Ω–µ –∑–Ω–∞–ª–∞,—Å–∞–º –∂–µ —Ä–µ–±–µ–Ω–æ–∫ –≤ —Å—Ç–æ–ª—å —Ä–∞–Ω–Ω–µ–º –≤–æ–∑—Ä–∞—Å—Ç–µ –Ω–µ –ø–æ–Ω–∏–º–∞–ª —á–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –µ–≥–æ –æ—Ç–µ—Ü,–ø–æ—Å–ª–µ –µ–≥–æ —Å–º–µ—Ä—Ç–∏ –º–∞–º–∞ –ª–≥–∞–ª–∞ –µ–º—É —á—Ç–æ –æ–Ω –ø–æ–≥–∏–± –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º —Å–ª—É—á–∞–µ –≤ –¥—Ç–ø–Æ–Ω–æ—Å—Ç—å –∏ –≤–∑—Ä–æ—Å–ª–∞—è –∂–∏–∑–Ω—å: –≤ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–º –≤–æ–∑—Ä–∞—Å—Ç–µ,–æ–±–µ—Å–ø–µ—á–∏–≤–∞—è —Å–µ–º—å—é,—Å—Ç–∞–≤ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –º—É–∂—á–∏–Ω–æ–π –≤ —Ä–∞–Ω–Ω–µ–º –≤–æ–∑—Ä–∞—Å—Ç–µ,–ø–∞—Ä–µ–Ω—å –±—Ä–æ—Å–∏–ª —É—á–µ–±—É –ø–æ—Å–ª–µ 9-–≥–æ –∫–ª–∞—Å—Å–∞ –∏ –Ω–µ —Å—Ç–∞–ª –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–≤–æ–∏–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º —Ç.–∫ –º–∞–º—É –Ω—É–∂–Ω–æ –±—ã–ª–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å,–æ–Ω —Ä–∞–±–æ—Ç–∞–ª –æ–±—ã—á–Ω—ã–º –ø–æ–≤–∞—Ä–æ–º,–≤ –∑–∞–±–µ–≥–∞–ª–æ–≤–∫–µ –≥.–ê—Ä–∑–∞–º–∞—Å,–∫—É–¥–∞ –æ–Ω–∏ –ø–µ—Ä–µ–µ—Ö–∞–ª–∏ –≤–º–µ—Å—Ç–µ —Å –º–∞–º–æ–π –ø–æ—Å–ª–µ —Å–º–µ—Ä—Ç–∏ –æ—Ç—Ü–∞,–∑–∞—Ä–ø–ª–∞—Ç—ã —Ö–≤–∞—Ç–∞–ª–æ –ª–∏—à—å –Ω–∞ –æ–ø–ª–∞—Ç—É –∫–≤–∞—Ä—Ç–∏—Ä—ã,–≤ –æ–¥–∏–Ω –¥–µ–Ω—å –ø–∞—Ä–Ω—é –¥–æ—Å—Ç–∞–ª—Å—è —Å—á–∞—Å—Ç–ª–∏–≤—ã–π –±–∏–ª–µ—Ç, –∏ –µ–≥–æ —É–∑–Ω–∞–ª–∏ —á–ª–µ–Ω—ã –û–ü–ì –≥.–ê—Ä–∑–∞–º–∞—Å,—Ç.–∫ —Ñ–∞–º–∏–ª–∏—è –µ–≥–æ –æ—Ç—Ü–∞ –±—ã–ª–∞ –Ω–∞ —Å–ª—É—Ö—É,–æ–Ω–∏ –ø—Ä–æ—è–≤–∏–ª–∏ –¥–æ–ª–∂–Ω–æ–µ —É–≤–∞–∂–µ–Ω–∏–µ –∫ –ø–∞—Ä–Ω—é –∏ –ø—Ä–∏–Ω—è–ª–∏ –∫ —Å–µ–±–µ –≤ –±–∞–Ω–¥—É,—Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –°–∞—è –±—ã–ª –≤—Å–µ –±–æ–ª–µ–µ —É–≤–∞–∂–∞–µ–º—ã–º –∏ —Å—Ç–∞–ª –ª–∏–¥–µ—Ä–æ–º –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏,–∏ –Ω–∞–∂–∏–ª —Å–µ–±–µ —Ö–æ—Ä–æ—à–µ–µ –∏–º—É—â–µ—Å—Ç–≤–æ –∑–∞ —Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ–≥—Ä–∞–±–ª–µ–Ω–∏–π –≤ –ì.–õ—ã—Ç–∫–∞—Ä–∏–Ω–æ –ù–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è: –°–∞—è –±—ã–ª –æ—á–µ–Ω—å —É–≤–∞–∂–∞–µ–º –≤–æ –≤—Å–µ–π –æ–±–ª–∞—Å—Ç–∏,–µ–≥–æ —Ñ–∞–º–∏–ª–∏—è –±—ã–ª–∞ –≤–æ –≤—Å–µ—Ö –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –≥–∞–∑–µ—Ç,–Ω–æ –ø—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ä–≥–∞–Ω—ã –Ω–µ –º–æ–≥–ª–∏ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –ª–∏–¥–µ—Ä–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏,–°–∞—è –±—ã–ª –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ì–µ–ª–µ–Ω—Ç–≤–∞–≥–µ–Ω –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è –∏ –±—ã–ª ¬´–∫—Ä—ã—à–µ–π¬ª –º–Ω–æ–≥–∏—Ö –±–∏–∑–Ω–µ—Å–æ–≤,–∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–ª–∞—á–∏–≤–∞–ª–∏ –µ–º—É –∑–∞ –∫—Ä—ã—à–µ–≤–∞–Ω–∏–µ –∏—Ö –±–∏–∑–Ω–µ—Å–æ–≤ ")

    ua = UserAgent()
    headers = {'User-Agent': ua.random}
    client = Client()
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{f"role": "user", "content": {prompt}}],
        headers=headers
    )
    print(response.choices[0].message.content)
    # Extract the generated biography text
    biography_text = response.choices[0].message.content

    # Send the biography to the user
    bot.send_message(user_id, biography_text, reply_markup=keyboard)


def handle_main_menu(message):
    user_id = message.chat.id
    main_menu(message)


def level_up_info(call):
    user_id = call.message.chat.id
    message = """
–≠—Ç–æ –æ—Å—Ç–∞–≤–ª—è—Ç—å –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–∞ —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ–º—ã–π "–†–ü —Å–æ–Ω" —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ —Å 23:00 –ø–æ 6:00 –ø–æ –º—Å–∫ –≤–∞—Å –Ω–µ –∫–∏–∫–∞–µ—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞ AFK .–ü–æ—ç—Ç–æ–º—É –≤—ã –ø—Ä–æ—Å—Ç–æ –∏–¥–µ—Ç–µ –≤ –∫–∞–∫–æ–π-—Ç–æ –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–¥—ä–µ–∑–¥ –¥–µ–ª–∞–µ—Ç–µ /anim 31 –∏ –æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–∞ –Ω–æ—á—å, –õ—É—á—à–µ –≤—Å–µ–≥–æ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –∑–∞–∫—É–ø–∏—Ç—å—Å—è –ø–æ —Ñ—É–ª–∞–º –≤ –ª–∞—Ä—å–∫–µ , —Ç–∞–∫ –∫–∞–∫ –µ—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–∫—É–ø–∏—Ç–µ—Å—å —Ç–æ —É –≤–∞—Å –±—ã—Å—Ç—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è HP –∏ –≤—ã –æ–∫–∞–∂–∏—Ç–µ—Å—å –≤ –ë–æ–ª—å–Ω–∏—Ü–µ, –æ—Ç—Ç—É–¥–∞ –≤–∞—Å —É–∂–µ –º–æ–≥—É—Ç –∫–∏–∫–Ω—É—Ç—å –∑–∞ –ø–æ–º–µ—Ö—É.–õ—É—á—à–µ –≤—Å–µ–≥–æ —á—Ç–æ–± –∫–æ–≥–¥–∞ –≤—ã –æ—Å—Ç–∞–≤–ª—è–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–∞ –†–ü –°–æ–Ω —É –≤–∞—Å –±—ã –±—ã–ª–∞ VIP.
    """
    bot.send_message(user_id, message)
    handler_guides(call)


def save_data():
    global new_users
    try:
        with open("users.json", "r") as f:
            existing_users = json.load(f)
        for user_id, user_data in users.items():
            if str(user_id) in existing_users:
                existing_users[str(user_id)].update(user_data)
            else:
                existing_users[str(user_id)] = user_data

        new_users = existing_users  # Update users in data to be saved

    except FileNotFoundError:
        print(1)

    with open('users.json', 'w', encoding='utf-8') as f:
        json.dump(new_users, f, ensure_ascii=False, indent=4)

    with open('reward_links.json', 'w', encoding='utf-8') as f:
        json.dump(reward_links, f, ensure_ascii=False, indent=4)


def load_data():
    global users, referrals, reward_links
    try:
        with open('users.json') as f:
            users = json.load(f)
    except FileNotFoundError:
        users = {}

    try:
        with open('referrals.json', 'r') as f:
            referrals = json.load(f)
    except FileNotFoundError:
        referrals = {}

    try:
        with open('reward_links.json', 'r') as f:
            reward_links = json.load(f)
    except FileNotFoundError:
        reward_links = {}


load_data()

if __name__ == '__main__':
    try:
        bot.infinity_polling(none_stop=True, timeout=90, long_polling_timeout=10)
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –û–®–ò–ë–ö–ê!: {e}")